# app.py
import streamlit as st
import pandas as pd
import plotly.express as px
from func import *
import plotly.graph_objects as go
from streamlit_tags import st_tags
from datetime import datetime, timedelta
import os
from scipy import stats
import folium
from folium.plugins import HeatMap
from streamlit_folium import st_folium
from geopy.geocoders import Nominatim
from geopy.extra.rate_limiter import RateLimiter
import zipfile

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–¢–†–ê–ù–ò–¶–´ ---
st.set_page_config(
    layout="wide",
    page_title="JobMarket Analytics Pro",
    page_icon="üìà",
    menu_items={
        'Get Help': 'https://github.com/your_repo',
        'Report a bug': "mailto:your@email.com",
        'About': "### JobMarket Analytics Pro v2.0\n–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"
    }
)

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• ---
@st.cache_data
def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ ZIP-–∞—Ä—Ö–∏–≤–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if not os.path.exists('hh.zip'):
            raise FileNotFoundError("–§–∞–π–ª hh.zip –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ ZIP-–∞—Ä—Ö–∏–≤
        if not zipfile.is_zipfile('hh.zip'):
            raise ValueError("–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ZIP-–∞—Ä—Ö–∏–≤–æ–º –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
        
        with zipfile.ZipFile('hh.zip', 'r') as zipf:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è CSV-—Ñ–∞–π–ª–∞ –≤ –∞—Ä—Ö–∏–≤–µ
            if 'hh.csv' not in zipf.namelist():
                available_files = "\n".join(zipf.namelist())
                raise ValueError(f"–§–∞–π–ª hh.csv –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:\n{available_files}")
            
            with zipf.open('hh.csv') as file:
                # –ß—Ç–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏ (—á–∞—Å—Ç–∞—è –ø—Ä–æ–±–ª–µ–º–∞)
                try:
                    df = pd.read_csv(file, encoding='utf-8')
                except UnicodeDecodeError:
                    file.seek(0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —á—Ç–µ–Ω–∏—è
                    df = pd.read_csv(file, encoding='cp1251')  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ DataFrame –Ω–µ –ø—É—Å—Ç–æ–π
                if df.empty:
                    raise ValueError("CSV-—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")
                
                return df
    except FileNotFoundError as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}. –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
        st.stop()
    except zipfile.BadZipFile:
        st.error("–§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ZIP-–∞—Ä—Ö–∏–≤–æ–º")
        st.stop()
    except Exception as e:
        st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        st.stop()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = fill_none_1(load_data())

# --- –ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨ (–§–ò–õ–¨–¢–†–´) ---
def create_sidebar_filters():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ —Å–∞–π–¥–±–∞—Ä–µ"""
    with st.sidebar:
        st.title("üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        with st.expander("üîß –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", expanded=True):
            experience = st.selectbox(
                "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã",
                options=list(df['experience_category'].unique()),
                index=0,
                help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞"
            )

            target_salary = st.number_input(
                "–°—Ä–∞–≤–Ω–∏—Ç—å —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π (—Ä—É–±)",
                min_value=int(df['salary_from'].min()),
                max_value=int(df['salary_to'].max()),
                value=70000,
                step=1000
            )

        # –£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã
        with st.expander("‚öôÔ∏è –£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã"):
            schedule_type = st.multiselect(
                "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã",
                options=list(df['schedule_label'].unique()),
                default=["–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å"]
            )
            
            employment_type = st.multiselect(
                "–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏",
                options=list(df['employment_label'].unique()),
                default=["–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å"]
            )

        # –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        with st.expander("üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"):
            regions = st.multiselect(
                "–†–µ–≥–∏–æ–Ω—ã",
                options=list(df['region_name'].unique()),
                default=["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"]
            )

            roles = st.multiselect(
                "–î–æ–ª–∂–Ω–æ—Å—Ç–∏",
                options=list(df['role_name'].unique()),
                default=[]
            )
            only_active = st.checkbox(
                "–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏",
                value=True
            )

    return {
        'experience': experience,
        'target_salary': target_salary,
        'schedule_type': schedule_type,
        'employment_type': employment_type,
        'regions': regions,
        'roles': roles,
        'only_active': only_active
    }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–µ–≥–∏–æ–Ω–æ–≤
@st.cache_data
def get_region_coordinates(geo_data):
    """–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
    from cordes import cordes
    city_coords = cordes
    geo_data['latitude'] = geo_data['region_name'].map(lambda x: city_coords.get(x, (None, None))[0])
    geo_data['longitude'] = geo_data['region_name'].map(lambda x: city_coords.get(x, (None, None))[1])
    
    # –î–ª—è —Ä–µ–≥–∏–æ–Ω–æ–≤ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–æ–∫–æ–¥–∏–Ω–≥
    geolocator = Nominatim(user_agent="geoapiExercises")
    geocode = RateLimiter(geolocator.geocode, min_delay_seconds=1)
    
    for idx, row in geo_data.iterrows():
        if pd.isna(row['latitude']):
            try:
                location = geocode(row['region_name'] + ', –†–æ—Å—Å–∏—è')
                if location:
                    geo_data.at[idx, 'latitude'] = location.latitude
                    geo_data.at[idx, 'longitude'] = location.longitude
            except:
                continue
                
    return geo_data.dropna(subset=['latitude', 'longitude'])

# –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–ª—É—á–∞–µ–º –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
filters = create_sidebar_filters()

# --- –û–°–ù–û–í–ù–ê–Ø –û–ë–õ–ê–°–¢–¨ ---
def create_main_content(filters):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    st.title("üìà JobMarket Analytics Pro")
    
    # –°—Ç–∏–ª–∏ CSS
    st.markdown("""
        <style>
            .metric-card {
                background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);
                border-radius: 12px;
                padding: 20px;
                margin-bottom: 20px;
                border-left: 4px solid #4a6bdf;
            }
            .metric-card h3 {
                color: #555;
                font-size: 14px;
                margin: 0 0 8px 0;
            }
            .metric-card h1 {
                color: #222;
                font-size: 28px;
                margin: 0;
            }
            .stPlotlyChart {
                margin-bottom: -30px !important;
            }
            .plot-container {
                padding-bottom: 0 !important;
            }
        </style>
    """, unsafe_allow_html=True)

    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2 = st.tabs(["üìä –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞", "üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –≤–∞–∫–∞–Ω—Å–∏–π"])

    # –í–ö–õ–ê–î–ö–ê 1: –û–ë–ó–û–† –†–´–ù–ö–ê
    with tab1:
        show_market_overview_tab(filters)

    # –í–ö–õ–ê–î–ö–ê 2: –ì–ï–û–ì–†–ê–§–ò–Ø –í–ê–ö–ê–ù–°–ò–ô
    with tab2:
        show_geography_tab(filters)

—Ålear_df = remove_salary_outliers(df)
spec = get_median(
                —Ålear_df,
                experience=filters['experience'],
                schedule_type=filters['schedule_type'],
                employment_type=filters['employment_type'],
                regions=filters['regions'],
                roles=filters['roles'],
                only_active=filters['only_active'])
filter_df = spec[(spec['salary_from'] > 0) & (spec['salary_to'] >0)]

total_vacancies = len(spec)

def show_market_overview_tab(filters):
    """–í–∫–ª–∞–¥–∫–∞ —Å –æ–±–∑–æ—Ä–æ–º —Ä—ã–Ω–∫–∞"""
    st.header("üìä –û–±–∑–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ä—ã–Ω–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
    col1, col2, col3 = st.columns(3)

    metric_style = """
        <style>
            .metric-card {
                background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);
                border-radius: 12px;
                padding: 20px;
                margin-bottom: 20px;
                border-left: 4px solid #4a6bdf;
                text-align: center;
                height: 120px;
                display: flex;
                flex-direction: column;
                justify-content: center;
            }
            .metric-card h3 {
                color: #555;
                font-size: 14px;
                margin: 0 0 8px 0;
            }
            .metric-card h1 {
                color: #222;
                font-size: 28px;
                margin: 0;
            }
        </style>
    """
    st.markdown(metric_style, unsafe_allow_html=True)
    with col1:
        if len(spec)>0:
            st.markdown(f"""
                <div class="metric-card">
                    <h3>–í–∞–∫–∞–Ω—Å–∏–π –≤ —Ä–µ–≥–∏–æ–Ω–µ</h3>
                    <h1>{total_vacancies:,}</h1>
                </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
                <div class="metric-card">
                    <h3>–í–∞–∫–∞–Ω—Å–∏–π –≤ —Ä–µ–≥–∏–æ–Ω–µ</h3>
                    <h1>N/A</h1>
                    <p style='color: #7f8c8d; font-size: 14px; margin: 8px 0 0 0;'>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω—ã</p>
                </div>
            """, unsafe_allow_html=True)

    with col2:
        if total_vacancies > 0:
            where = spec[spec['salary_from'] > 0]
            median_min = where['salary_from'].median()
            
            st.markdown(f"""
                <div class="metric-card" style="border-left-color: #27ae60;">
                    <h3>–ú–µ–¥–∏–∞–Ω–Ω–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞</h3>
                    <h1>{int(median_min):,} ‚ÇΩ</h1>
                </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
                <div class="metric-card" style="border-left-color: #27ae60;">
                    <h3>–ú–µ–¥–∏–∞–Ω–Ω–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞</h3>
                    <h1>N/A</h1>
                </div>
            """, unsafe_allow_html=True)

    with col3:
        if total_vacancies > 0:
            where = spec[spec['salary_to'] > 0]
            median_max = where['salary_to'].median()
            
            st.markdown(f"""
                <div class="metric-card" style="border-left-color: #e74c3c;">
                    <h3>–ú–µ–¥–∏–∞–Ω–Ω–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞</h3>
                    <h1>{int(median_max):,} ‚ÇΩ</h1>
                </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
                <div class="metric-card" style="border-left-color: #e74c3c;">
                    <h3>–ú–µ–¥–∏–∞–Ω–Ω–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞</h3>
                    <h1>N/A</h1>
                </div>
            """, unsafe_allow_html=True)

    # –î–æ–±–∞–≤–ª—è–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç
    if len(spec) > 0:
        st.subheader("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç")
        
        salary_col1, salary_col2 = st.columns(2)
        
        with salary_col1:
            salary_type = st.radio(
                "–¢–∏–ø –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                ["–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞"],
                horizontal=True
            )
        
        with salary_col2:
            bins = st.slider(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤",
                min_value=5,
                max_value=50,
                value=20,
                help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–∞ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–µ"
            )
        
        if salary_type == "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞":
            salary_data = spec[spec['salary_from'] > 0]['salary_from']
            title = "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–∞—Ä–ø–ª–∞—Ç"
        else:
            salary_data = spec[spec['salary_to'] > 0]['salary_to']
            title = "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∑–∞—Ä–ø–ª–∞—Ç"
        
        fig = px.histogram(
            salary_data,
            nbins=bins,
            title=title,
            labels={'value': '–ó–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±)', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π'},
            color_discrete_sequence=['#4a6bdf']
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –¥–ª—è target_salary
        fig.add_vline(
            x=filters['target_salary'],
            line_dash="dash",
            line_color="red",
            annotation_text=f"–í–∞—à–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞: {filters['target_salary']:,} —Ä—É–±",
            annotation_position="top"
        )
        
        fig.update_layout(
            bargap=0.1,
            plot_bgcolor='white',
            xaxis_title="–ó–∞—Ä–ø–ª–∞—Ç–∞, —Ä—É–±",
            yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π",
            hovermode="x"
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ–ª–æ–∂–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã
        if len(salary_data) > 0:
            percentile = stats.percentileofscore(salary_data, filters['target_salary'])
            st.info(f"üí° –í–∞—à–∏ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è ({filters['target_salary']:,} —Ä—É–±) –ø—Ä–µ–≤—ã—à–∞—é—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ {percentile:.1f}%")

def show_geography_tab(filters):
    """–í–∫–ª–∞–¥–∫–∞ —Å –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –≤–∞–∫–∞–Ω—Å–∏–π (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ)"""
    st.header("üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π")
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
    if not filter_df.empty:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        geo_data = filter_df.groupby('region_name').agg(
            –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–∞–∫–∞–Ω—Å–∏–π=('id', 'count'),
            —Å—Ä–µ–¥–Ω—è—è_–∑–∞—Ä–ø–ª–∞—Ç–∞=('salary_from', 'mean')
        ).reset_index()
        geo_data = get_region_coordinates(geo_data)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –∫–∞–∂–¥—ã–π —Ä–∞–∑, –Ω–æ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        m = folium.Map(location=[62, 94], zoom_start=3)
        
        # 1. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É
        heat_data = [[row['latitude'], row['longitude'], row['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–∞–∫–∞–Ω—Å–∏–π']] 
                   for _, row in geo_data.iterrows()]
        HeatMap(heat_data, radius=15, blur=10).add_to(m)
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã (–∫—Ä—É–∂–∫–∏)
        max_vacancies = geo_data['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–∞–∫–∞–Ω—Å–∏–π'].max()
        for _, row in geo_data.iterrows():
            folium.CircleMarker(
                location=[row['latitude'], row['longitude']],
                radius=5 + 15 * (row['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–∞–∫–∞–Ω—Å–∏–π'] / max_vacancies),
                popup=folium.Popup(
                    f"<b>{row['region_name']}</b><br>"
                    f"–í–∞–∫–∞–Ω—Å–∏–π: {row['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–∞–∫–∞–Ω—Å–∏–π']}<br>"
                    f"–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {row['—Å—Ä–µ–¥–Ω—è—è_–∑–∞—Ä–ø–ª–∞—Ç–∞']:,.0f} —Ä—É–±",
                    max_width=250
                ),
                color='#3186cc',
                fill=True,
                fill_color='#3186cc',
                fill_opacity=0.7
            ).add_to(m)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—É –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        st_folium(
            m,
            width=1200,
            height=600,
            returned_objects=[]  # –û—Ç–∫–ª—é—á–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
        )
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        st.subheader("–î–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
        st.dataframe(
            geo_data[['region_name', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–∞–∫–∞–Ω—Å–∏–π', '—Å—Ä–µ–¥–Ω—è—è_–∑–∞—Ä–ø–ª–∞—Ç–∞']]
            .sort_values('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–∞–∫–∞–Ω—Å–∏–π', ascending=False)
            .style.format({'—Å—Ä–µ–¥–Ω—è—è_–∑–∞—Ä–ø–ª–∞—Ç–∞': '{:,.0f} —Ä—É–±.'})
        )
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")

if __name__ == "__main__":
    create_main_content(filters)